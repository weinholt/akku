.\" HTML output: groff -man -Thtml docs/akku.1
.TH AKKU "1" "January 2020" "Akku.scm" "User Commands"
.SH "NAME"
akku \- R6RS/R7RS Scheme language package manager
.SH "SYNOPSIS"
\fBakku\fR [\-\-\fBdebug\fR] [\-\-\fBtrace\fR] {init \fIdirectory\fR | list | show \fIpkg\fR | install \fIpkg\fR[@\fIversion-range\fR].\|.\|. | update | add [\-\-\fBdev\fR] \fIpkg\fR[@\fIversion-range\fR] | lock | install | remove \fIpkg\fR.\|.\|. | uninstall \fIpkg\fR.\|.\|. | version | scan [\fIdirectory\fR] | publish [\-\-\fBversion\fR=\fIversion\fR] [\-\-\fBtag\fR=\fItag\fR] | graph [\fIdirectory\fR] | dependency\-scan \-\-\fBimplementation\fR=\fIimpl\fR \fIfilename\fR.\|.\|. | license\-scan \-\-\fBimplementation\fR=\fIimpl\fR \fIfilename\fR.\|.\|. | archive\-scan \fIdirectory\fR.\|.\|. | compat\-scan \fIfilename\fR.\|.\|.}
.SH DESCRIPTION
\fBAkku.scm\fR is a project-based language package manager for R6RS
and R7RS Scheme. It is mainly meant for programmers who develop
portable programs or libraries in Scheme, but could potentially work
for end-users of those programs. It also has a translator from R7RS,
which allows most R7RS code to run on R6RS implementations.
.PP
Being project-based means that dependencies are local to each project
you manage with Akku. Each project specifies its dependencies through
a manifest and a lockfile. When working on a project, you run
\fCakku install\fR and then \fC.akku/env\fR to start a new shell with
that project's environment variables set. This ensures that the code
you load into your program is that of your direct or indirect
dependencies, instead of something that just happened to exist
somewhere in your load path.
.PP
A project's direct dependencies are listed in the manifest. By running
a dependency solver, specific versions of those dependencies are
\fIlocked\fR. The lockfile contains locations, cryptographic checksums
and other information needed for Akku to install selected versions of
all dependencies. This means that everyone using the same lockfile
will get exactly the same dependencies installed as you.
.PP
This manpage mostly describes the command line
interface, where these commands are available:
.\" ------------------------------------------
.TP
\fBinit\fR \fIdirectory\fR
Initialize a new project with a simple template that demonstrates
a program, a library and a test. This is not necessary to start
using Akku in an existing project. In that case you simply go
to the root directory of the project and start running akku.
.\" ------------------------------------------
.TP
.B list
List the local package index. For each package in the index it shows
the name (used in command line arguments), the version and a short
synopsis. When used in the project directory it will read the manifest
and the lockfile and use that information to highlight versions that
match the dependencies.
.\" ------------------------------------------
.TP
.BI show " pkg"
Display details about a package in the local package index. The first
few sections are for your information only. Any dependencies are
listed together with a simplified version range in braces. The source
code section shows all information that will be used to download the
package when it is installed.
.\" ------------------------------------------
.TP
.B install \fIpkg\fR[@\fIversion-range\fR].\|.\|.
Running install with a list of packages will add them to the package
manifest, lock dependencies and install everything in the lockfile.
.\" ------------------------------------------
.TP
.B install
Run this command to rebuild \fI.akku/lib\fR. Also run this command
after adding new libraries to your project since they need to be
symlinked into \fI.akku/lib\fR.
.IP
This command follows the instructions in the lockfile to download and
install the listed dependencies. A file scanner looks at each file in
the downloaded projects and figures out what type of source it is and
where it goes in the file system.
.\" ------------------------------------------
.TP
.B update
Updates the local package index. Use this to get access to the latest
list of packages. It does not change your project in any way, apart
from letting the lock command choose newer versions that were not
previously available.
.IP
The index files are signed with GnuPG signatures that are verified
before they are used. The SHA-2 implementation is a little slow, so
this takes a few seconds.
.\" ------------------------------------------
.TP
\fBadd\fR [\-\-\fBdev\fR] \fIpkg\fR[@\fIversion-range\fR]
Adds a package to the manifest using a version range that allows
forwards-compatible upgrades. Optionally the range can be specified
manually using the \fIpkg\fR@\fIversion-range\fR syntax, e.g.
\fIsemver@^1.0.0\fR. It's also possible to edit the manifest by hand,
but formatting will not be preserved by these commands.
.IP
The range notation is provided by the semver package.
.IP
The \-\-\fBdev\fR option adds the package as a development dependency.
Development dependencies are ignored when the package is used as a
dependency by a third package (they are only needed when doing
development on the current package).
.\" ------------------------------------------
.TP
.B lock
Locks dependencies. Runs a dependency solver over the manifest and the
local package index and generates the lockfile. The lockfile contains
the location of each transitive dependency together with a
cryptographic identity.
.IP
It is wise to commit both the manifest and the lockfile in your source
code repository. Neither are used by your reverse dependencies after a
package has been published, but both are useful for yourself and other
people.
.\" ------------------------------------------
.TP
.B remove \fIpkg\fR.\|.\|.
Updates the package manifest to remove dependencies, doing the
opposite of add.
.\" ------------------------------------------
.TP
.B uninstall \fIpkg\fR.\|.\|.
Does three things: removes dependencies from the manifest, locks
dependencies and runs install to remove the files that are no longer
needed.
.\" ------------------------------------------
.TP
.B version
Print the Akku.scm version number to standard output.
.\" ------------------------------------------
.TP
\fBscan\fR [\fIdirectory\fR]
Scans a directory recursively and analyses all files. The result of
the analysis is printed as a series of YAML documents (syntax might
be a bit off: send bug reports). Useful for figuring out what type
of code Akku thinks the repository contains.
.\" ------------------------------------------
.TP
\fBpublish\fR [\-\-\fBversion\fR=\fIversion\fR] [\-\-\fBtag\fR=\fItag\fR]
Guides you through publishing your package. It generates a package
index snippet and asks if you want to submit it. If you answer yes
then it fires up gpg to sign the displayed snippet, which is then
submitted to the archive server.
.IP
The version to publish is taken from the manifest but can be
overridden by using the \-\-\fBversion\fR=\fIversion\fR option. By
default it looks for a tag named v\fIversion\fR. It is possible to
override the tag using the \-\-\fBtag\fR=\fItag\fR option if the
repository does not use the v1.2.3 tagging scheme. If it does not find
a tag then the published revision will match the current HEAD.
.IP
It is always the lock section of the printed index snippet that
controls which revision is used for the published version. It is also
the currently checked out manifest that will be used to populate the
metadata of the index snippet; not the manifest that happens to be
checked in under the revision.
.IP
There is no strong requirement to commit the manifest before
publishing. This means that you can also publish other people's
repositories, even if you do not have commit rights.
.IP
See section
.B "PUBLISHING PACKAGES"
below for a checklist of things to go through before publishing.
.IP
This command requires gpg, a gpg key and curl.
.\" ------------------------------------------
.TP
.B graph [\fIdirectory\fR]
Runs the repository analyser and prints a digraph of library
dependencies. It's kind of a proof of concept at this point. Example
usage: \fCakku graph | dot -Tx11\fR.
.\" ------------------------------------------
.TP
\fBdependency\-scan\fR \-\-\fBimplementation\fR=\fIimpl\fR \fIfilename\fR.\|.\|.
Traces the dependencies of a set of program source files.
At least one implementation should be specified. They are named
by the short names used in sls filenames, e.g. \fIikarus\fR.
.\" ------------------------------------------
.TP
\fBlicense\-scan\fR \-\-\fBimplementation\fR=\fIimpl\fR \fIfilename\fR.\|.\|.
Does the same dependency scanning as dependency\-scan, but then
searches through all files it finds to look for license notices and
similar legal text. This command is useful as a first step in
gathering notices when distributing a compiled Scheme program.
.IP
Some words are worth repeating here:
this program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.\" ------------------------------------------
.TP
\fBarchive\-scan\fR \fIdirectory\fR.\|.\|.
Scans the given directories for \fC*.akku\fR files and gathers them
into a single index file. This is used at repository servers as part
of maintaining the archive.
.\" ------------------------------------------
.TP
\fBcompat\-scan\fR \fIfilename\fR.\|.\|.
Scans the given files for Scheme implementation compatibility. The
files should be programs or libraries. All their imports are
recursively checked for compatibility and missing libraries are
printed.
.\" ------------------------------------------
.SH "PUBLISHING PACKAGES"
You can make R6RS packages available to other users through the central
Akku.scm registry with the \fBpublish\fR command described above. If your
package is written in R7RS then please publish to
.UR http://snow-fort.org/
Snow
.UE
instead so that your package will also be available in other R7RS
package managers. Here is a checklist of items to consider before
publishing:
.
.IP 1.
Check that your manifest is up to date and contains at least the
right package name, version, synopsis, at least one author and a
license identifier.
.IP 2.
Version numbers must follow the
.UR https://semver.org/
SemVer specification
.UE .
If you are packaging software that does not follow the SemVer rules
then adjust the version numbers so that they follow the rules (they don't
need to match the original software exactly).
.IP 3.
Please pay some attention to the license field to make sure that it is
accurate. Use the identifiers from
.UR https://\:spdx.org/\:licenses/
the SPDX project
.UE ,
making sure to use an open source license.
.IP 4.
Prepare and publish your GnuPG key if you do not yet have one. If
you're not too particular on the details of this and just want a key
that works then you can run \fCgpg \-\--gen\fR and answer the prompts.
Afterwards you need to publish your key to the public key servers
using the command \fCgpg \-\-keyserver pgp.mit.edu \-\-send-keys
\f[CI]keyID\fR, using the key ID associated with your new key.
.IP 5.
Currently all projects need to be in a publicly available git
repository, but this will change later. The release should preferably
be tagged using their SemVer version numbers: version 1.0.0 gets
tagged with \fIv1.0.0\fR. You can use \fCgit tag \-s v1.0.0\fR to make
a signed tag (and don't forget to use \fCgit push --tags\fR).
.
.PP
All packages in the index are signed with GnuPG signatures. This
provides important benefits: third parties can verify the package
index and the archive software can verify that a newly uploaded
version came from same author as previously uploaded versions.
The email on your GnuPG key is used to contact you if there are
any questions.
.PP
Packages are manually reviewed before they are accepted into the
package index. Ask in #akku on Freenode if there are problems.
.PP
Publishing is meant to be easy and hassle-free after some initial
setup, so please report any usability problems with the publish
command.
.SH BUGS
Implementation-specific language constructs such as modules and
lexical syntax are handled rather poorly.
.PP
The conversion of R7RS code is not complete. It does not add quotes to
vectors, which are self-quoting in R7RS but not in R6RS. If the R7RS
code uses shared data at the lexical level then the written R6RS
library will also use that and may end up not being loadable by a
conformant R6RS implementation. The R7RS support needs the akku\-r7rs
package to be installed.
.PP
The lock command (and any command that uses it behind the scenes) does
not preserve the versions of previously locked packages. This is
planned to be fixed.
.PP
The Cygwin and MSYS2 ports do not support colons in filenames. This
has the unfortunate consequence that Chez Scheme and SRFI 97-compliant
SRFI distributions do not work on these platforms. Symlinks are also
not supported.
.PP
Whereas GNU Guile 3.0 has the \-\-r6rs command line argument,
GNU Guile 2.2 does not provide a direct way to enable full R6RS support.
It should be started with the flags \fC-x .guile.sls -x .sls\fR on
the command line. Alternatively you can add these lines to your
\fC~/.guile\fR:
.RS
.EX
(set! %load-extensions (append \(aq(".guile.sls" ".sls")
                               %load-extensions))
(read-enable \(aqr6rs-hex-escapes)
(read-enable \(aqhungry-eol-escapes)
.EE
.RE
.PP
Please report bugs to
.UR https://\:gitlab.com/\:akkuscm/\:akku/\:issues
GitLab issues
.UE
or by
.MT bugs@\:akkuscm.org
email
.ME .
.SH EXAMPLES
.\" ------------------------------------------
.SS "Updating the local package index"
.\" ------------------------------------------
Right after installation and before doing anything else, it's a good
idea to update the local package index:
.
.RS
.EX
$ akku update
.EE
.RE
.
.\" ------------------------------------------
.SS "Quick start in a new project"
.\" ------------------------------------------
A quick way to get a new project up and running is the \fBinit\fR
command:
.
.RS
.EX
$ akku init my-project
$ cd my-project
$ akku install
$ .akku/env
.EE
.RE
.
Use \fBakku list\fR to find some package you want to use, or browse
the package list on the Akku website. When you want to install a
package, e.g. json-tools, run \fBakku install json-tools\fR. This adds
it to the package manifest, locks all dependencies to specific
versions and rewrites .akku/ to the locked versions.
.\" ------------------------------------------
.SS "Install dependencies step-by-step"
.\" ------------------------------------------
Dependencies can be installed step-by-step in order to follow the process:
.
.RS
.EX
$ akku add chez-srfi  # writes Akku.manifest
$ akku lock           # writes Akku.lock
$ akku install        # updates .akku/
.EE
.RE
.
.SH ENVIRONMENT
.ta \w'AKKU_HOME       'u
.nf
\fIAKKU_LOG_LEVEL\fR	log level: trace, debug, info, warning, error, critical
\fIAKKU_ENV\fR	informative variable; not used (set by .akku/env)
\fIAKKU_R6RS\fR	R6RS Scheme library path, for system libraries
\fIAKKU_R7RS\fR	R7RS Scheme library path, for system libraries
\fIAKKU_PROJECTS\fR	extra project directories to install into .akku/
\fIAKKU_SETTINGS\fR	comma-separated list of settings (see below)
\fIXDG_CACHE_HOME\fR	cache directory home (default: ~/.cache)
\fIXDG_DATA_HOME\fR	data directory home (default: ~/.local/share/)
\fIHOME\fR	user's home directory
.PP
The \fIAKKU_SETTINGS\fR variable can contain these settings:
.ta \w'AKKU_HOME       'u
.nf
\fIno-network\fR	do not use the network (and fail if it would be needed)
\fIno-dependencies\fR	do not use any projects from the lockfile
.SH FILES
.nf
.ta \w'PREFIX/share/akku/bootstrap.db  'u
\fIPREFIX/share/akku/bootstrap.db\fR	the package index from the distribution
\fIPREFIX/share/akku/keys.d\fR	trusted keys for package indices
\fI~/.local/share/akku/keys.d/\fR	extra trusted keys
\fI~/.local/share/akku/index.db\fR	the latest package index
\fI~/.cache/akku\fR	cached downloads
\fIAkku.manifest\fR	the package manifest
\fIAkku.lock\fR	instructions for installing dependencies
\fI.akkuignore\fR	files to ignore (no wildcards)
\fI.akku/bin/\fR	programs from packages; activate script
\fI.akku/lib/\fR	installed libraries from packages
\fI.akku/ffi/\fR	compiled libraries for use with an FFI
\fI.akku/list\fR	a list of files and whence they came
\fI.akku/notices/\fR	license notices from installed packages
\fI.akku/src/\fR	downloaded source code
.SH AUTHOR
Written by G\[:o]ran Weinholt.
.PP
Thanks to everyone who has contributed to Scheme over the years.
.SH HISTORY
The dependency solver comes from Andreas Rottmann's dorodango, an
earlier R6RS package manager, and he ported it from the solver in
.BR aptitude (8).
.SH COPYRIGHT
Copyright \(co 2020 G\[:o]ran Weinholt.
License GPLv3+: GNU GPL version 3 or later
.UR http://\:gnu.org/\:licenses/\:gpl.html
.UE
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
The project website:
.UR https://akkuscm.org/
.UE
.br
The project wiki:
.UR https://gitlab.com/akkuscm/akku/wikis/home
.UE
